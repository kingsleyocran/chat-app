services:
  prometheus:
    container_name: chat_app_prometheus
    image: prom/prometheus:latest
    volumes:
      - ./data/prometheus/:/etc/prometheus/
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 7071:9090
    restart: always
    extra_hosts:
      - "chatapplication:${PUBLIC_ADDRESS}"

  grafana:
    container_name: chat_app_grafana
    image: grafana/grafana:7.5.6
    ports:
      - 7072:3000
    restart: unless-stopped
    volumes:
      - "$PWD/data/grafana/provisioning/dashboards:/var/lib/grafana/dashboards:rw"
      - "$PWD/data/grafana/provisioning/datasources:/var/lib/grafana/datasources:rw"
      - "$PWD/data/grafana/grafana.ini:/etc/grafana/grafana.ini"
      - grafana-data:/var/lib/grafana:rw
    depends_on:
      mysqldb:
        condition: service_healthy
      prometheus:
        condition: service_started

  redis:
    image: redis
    container_name: chat_app_redis
    ports:
      - 6380:6379

  postgres:
    container_name: chat_app_postgres
    image: debezium/postgres:14-alpine
    restart: always
    ports:
      - "6381:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready",
          "-U",
          "admin",
          "-d",
          "chat_app_database"
        ]

    volumes:
      - "$PWD/data/postgres/postgres.conf:/etc/postgresql/postgres.conf:rw"
      - "$PWD/data/postgres/hba_file.conf:/etc/postgresql/hba_file.conf:rw"

    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-admin}
      - POSTGRES_USER=${DATABASE_USER:-admin}
      - POSTGRES_DB=chat_app_database
    command:
      - "-c"
      - "config_file=/etc/postgresql/postgres.conf"
      - "-c"
      - "hba_file=/etc/postgresql/hba_file.conf"

  mysqldb:
    image: mysql:8.0
    container_name: chat_app_mysqldb
    restart: always
    ports:
      - 6382:3306
    volumes:
      - "$PWD/data/my_cnf.cnf:/etc/mysql/conf.d/mysql.cnf:rw"
    environment:
      - MYSQL_USER=${DATABASE_USER:-admin}
      - MYSQL_PASSWORD=${DATABASE_PASSWORD:-admin}
      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD:-admin}
      - MYSQL_DATABASE=chat_app_database
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "mysqldb" ]

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: chat_app_jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 14250:14250
      - 9411:9411
      - 4317:4317
      - 4318:4318

  elasticsearch:
    container_name: chat_app_elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    environment:
      - discovery.type=single-node
    ports:
      - "6383:9200"
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1

  zookeeper:
    container_name: chat_app_zoo_keeper
    image: quay.io/debezium/zookeeper:2.1
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888

  kafka:
    container_name: chat_app_kafka
    image: quay.io/debezium/kafka:2.1
    ports:
      - 9092:9092
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper

  apicurio:
    container_name: chat_app_apicurio
    image: apicurio/apicurio-registry-kafkasql:2.3.1.Final
    ports:

      - 8080:8080

    environment:
      - KAFKA_BOOTSTRAP_SERVERS=http://kafka:9092

  kafka_connect:
    container_name: chat_app_kafka_connect
    image: quay.io/debezium/connect:2.1
    ports:
      - 9095:8083
    environment:
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - BOOTSTRAP_SERVERS=kafka:9092
      - KEY_CONVERTER=io.apicurio.registry.utils.converter.AvroConverter
      - VALUE_CONVERTER=io.apicurio.registry.utils.converter.AvroConverter
      - CONNECT_KEY_CONVERTER=io.apicurio.registry.utils.converter.AvroConverter
      - CONNECT_KEY_CONVERTER_APICURIO.REGISTRY_URL=http://apicurio:8080/apis/registry/v2
      - CONNECT_KEY_CONVERTER_APICURIO_REGISTRY_AUTO-REGISTER=true
      - CONNECT_KEY_CONVERTER_APICURIO_REGISTRY_FIND-LATEST=true
      - CONNECT_VALUE_CONVERTER=io.apicurio.registry.utils.converter.AvroConverter
      - CONNECT_VALUE_CONVERTER_APICURIO_REGISTRY_URL=http://apicurio:8080/apis/registry/v2
      - CONNECT_VALUE_CONVERTER_APICURIO_REGISTRY_AUTO-REGISTER=true
      - CONNECT_VALUE_CONVERTER_APICURIO_REGISTRY_FIND-LATEST=true
      - CONNECT_SCHEMA_NAME_ADJUSTMENT_MODE=avro
      - ENABLE_APICURIO_CONVERTERS=true

    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
      apicurio:
        condition: service_started
      elasticsearch:
        condition: service_healthy

  ksql_server:
    container_name: chat_app_ksql_server
    image: confluentinc/ksqldb-server
    ports:
      - 8088:8088
    environment:
      - KSQL_BOOTSTRAP_SERVERS=kafka:9092
      - KSQL_KSQL_SERVICE_ID=ksql_service_2_
      - KSQL_LISTENERS=http://0.0.0.0:8088/
      - KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE=true
      - KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE=true
      - KSQL_OPTS= -Dksql.connect.url=http://kafka_connect:8083 -Dksql.schema.registry.url=http://apicurio:8080/apis/ccompat/v6

    depends_on:
      - kafka_connect
      - kafka

volumes:
  grafana-data:


networks:
  default:
    driver: bridge
